buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins", version: "1.0.369"
        	classpath "de.richsource.gradle.plugins:typescript-gradle-plugin:1.8.0"
	}

	repositories {
		mavenLocal()

		maven {
			url {
                "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
            }
		}

        maven {
            url {
                "https://plugins.gradle.org/m2/"
            }
        }

    }
}

apply plugin: "base"
//apply plugin: "com.liferay.plugin"
apply plugin: 'maven'

dependencies {
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "2.0.0"
	compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "2.0.0"
	compileOnly group: 'com.liferay',         name: 'com.liferay.portal.configuration.metatype', version: '2.0.0'
    compileOnly group: "biz.aQute.bnd",       name: "biz.aQute.bndlib",                          version: "3.1.0"
    compileOnly group: 'io.swagger',          name: 'swagger-annotations',                       version: '1.5.9'
    compileOnly group: 'javax.ws.rs',         name: 'javax.ws.rs-api',                           version: '2.0.1'

    compile group: "javax.portlet", name: "portlet-api", version: "2.0"
	compile group: "javax.servlet", name: "servlet-api", version: "2.5"
	compile group: "jstl", name: "jstl", version: "1.2"
	compile group: "org.osgi", name: "org.osgi.compendium", version: "5.0.0"
}

repositories {
	mavenLocal()

	maven {
		url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}
}
def isWindows = org.gradle.internal.os.OperatingSystem.current().windows
def npm = isWindows ? "npm.cmd" : "npm"

task copyPackageJson(type: Copy) {
    from 'package.json'
    into 'build/resources/main/META-INF'
}

task copyNodeModules(type: Copy) {
    from 'node_modules'
    into 'build/resources/main/META-INF/resources/node_modules'
}


// Get the path for the locally installed binaries
task npmBin << {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = npm
            args = ['bin']
            standardOutput = os
        }
        ext.binPath = os.toString().trim() + "/"
    }
}

// Install packages from package.json
task npmTask(type: Exec) {
    description = "Grab NodeJS dependencies (from package.json)"
    commandLine = [npm, "install"]
    inputs.file "package.json"
    outputs.dir "node_modules"

    tasks.npmBin.execute()

}

copyNodeModules.dependsOn 'npmTask'


public class TsCompileTask extends DefaultTask {

    @InputFiles
    Set<File> source = [] as Set;

    @OutputFile
    File outputFile;

    @OutputDirectory
    File outputDir;

    @TaskAction
    void compile() {
        println "compiling TypeScript files..."
        def tsc = org.gradle.internal.os.OperatingSystem.current().windows ? "node_modules/.bin/tsc.cmd" : "node_modules/.bin/tsc"
        List<File> files = source.collect { File source ->
            if (!source.isDirectory())
                return source
            return project.fileTree(source) {
                include "**/*.ts"
            }.files
        }.flatten()

        files.each {
            file -> project.exec {
                executable = tsc
		        workingDir = "."
                args "--sourceMap"
                args "--emitDecoratorMetadata"
                args "--experimentalDecorators"
                args "--removeComments"
                args "--noImplicitAny"
                args "--outDir"
                args outputDir.toString()
                args "--target"
                args "es5"
                args "--module"
                args "commonjs"
                args "--moduleResolution"
                args "node"
                args files
                args "--suppressImplicitAnyIndexErrors"
            }
        }
    }
}

task tsCompile(type:TsCompileTask) {
    source = [file("src/main/typescript")]
    outputFile = file("build/resources/main/META-INF/resources/js/main.js")
    outputDir = file("build/resources/main/META-INF/resources/js")
}


tsCompile.dependsOn {
    tasks.findAll { task -> task.name.startsWith('copy') }
}

build.dependsOn 'tsCompile'

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: System.getenv('NEXUS_URL')) {
				authentication(userName: System.getenv('NEXUS_USERNAME'), password: System.getenv("NEXUS_PASSWORD"))
			}
			pom.version = "1.0.0-SNAPSHOT"
			pom.artifactId = "dxp-book-rest-client"
			pom.groupId = "com.xtivia"
		}
	}
}
